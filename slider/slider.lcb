/*

A slider control. As the user drags the knob the 'valueChanged' message will be sent to the widget. The first parameter is a value between 0 and 1 representing the percentage of the location of the knob relative to the bar.

*/

widget community.livecode.trevordevore.slider

	use com.livecode.widget
	use com.livecode.canvas
	
	metadata title is "Slider"
	metadata author is "Trevor DeVore"
	metadata version is "1.0.0"
	
	-- properties
	variable mCornerRadius          as Number
	variable mBarColor              as Color
	variable mKnobColor             as Color
	variable mKnobHiliteColor       as Color
	variable mKnobBorderColor       as Color
	variable mKnobBorderHiliteColor as Color
	variable mKnobBorderSize        as Number
	
	-- private
	variable mDrag            as Boolean
	variable mKnobX           as Real
	variable mKnobRadius      as Real
	variable mSliderBounds    as Rectangle
	variable mClickXOffset      as Real
	variable mCurrentKnobBounds as Rectangle 
	
	property cornerRadius            get mCornerRadius              set setCornerRadius
	property barColor                get getBarColor                set setBarColor
	property knobColor               get getKnobColor               set setKnobColor
	property knobHiliteColor         get getKnobHiliteColor         set setKnobHiliteColor
	property knobBorderColor         get getKnobBorderColor         set setKnobBorderColor
	property knobBorderHiliteColor   get getKnobBorderHiliteColor   set setKnobBorderHiliteColor
	property knobBorderSize          get mKnobBorderSize            set setKnobBorderSize
	property sliderPercent           get getKnobPercent             set setKnobPercent

	metadata barColor.editor        is "com.livecode.pi.color"
	metadata knobColor.editor       is "com.livecode.pi.color"
	metadata knobHiliteColor.editor       is "com.livecode.pi.color"	
	metadata knobBorderColor.editor is "com.livecode.pi.color"	
	metadata knobBorderHiliteColor.editor is "com.livecode.pi.color"
	
	public handler OnCreate()
		-- variables
		put 3 into mCornerRadius
		put color [192/255, 198/255, 213/255] into mBarColor
		put color [1, 1, 1] into mKnobColor
		put color [53/255, 151/255, 243/255] into mKnobHiliteColor
		put color [155/255, 168/255, 179/255] into mKnobBorderColor
		put color [53/255, 151/255, 243/255] into mKnobBorderHiliteColor
		put 1 into mKnobBorderSize
		
		-- private 
		put false into mDrag
		
		calculateGeometry()
	end handler
	
	
	public handler OnSave(out rProperties as Array)
		put the empty array into rProperties
		
		put mCornerRadius into rProperties["cornerRadius"]
		put colorToString(mBarColor, true) into rProperties["barColor"]
		put colorToString(mKnobColor, true) into rProperties["knobColor"]
		put colorToString(mKnobBorderColor, true) into rProperties["knobBorderColor"]
		put mKnobBorderSize into rProperties["knobBorderSize"]

		return rProperties
	end handler
	
	
	public handler OnLoad(in pProperties as Array)
		put pProperties["cornerRadius"] into mCornerRadius
		put stringToColor(pProperties["barColor"]) into mBarColor
		put stringToColor(pProperties["knobColor"]) into mKnobColor
		put stringToColor(pProperties["knobBorderColor"]) into mKnobBorderColor
		put pProperties["knobBorderSize"] into mKnobBorderSize
	end handler
	
	
	public handler OnGeometryChanged()
		-- maintain percentage value of slider
		variable tPercent as Real
		put getKnobPercent() into tPercent
		
		calculateGeometry()
		
		setKnobX(the left of mSliderBounds + the width of mSliderBounds * tPercent)
	end handler
	
	
	public handler OnPaint()
	
		variable tY as Real
		
		put the top of mSliderBounds + the height of mSliderBounds/2 into tY
	
		-- Draw the bar
		set the paint of this canvas to solid paint with mBarColor
		fill rounded rectangle path of mSliderBounds with radius mCornerRadius on this canvas
		
		-- Draw the knob
		variable tPath as Path
		
		set the paint of this canvas to getPaint("knob")
		put circle path centered at point [mKnobX, tY] with radius mKnobRadius into tPath
		put the bounding box of tPath into mCurrentKnobBounds -- for hit tracking
		fill tPath on this canvas
		
		set the paint of this canvas to getPaint("knob border")
		set the stroke width of this canvas to mKnobBorderSize
		stroke circle path centered at point [mKnobX, tY] with radius mKnobRadius on this canvas
	end handler
	

	public handler OnMouseMove()
		if mDrag then
			variable tCurValue as Real
			
			put mKnobX into tCurValue
			
			setKnobX(the x of the mouse position - mClickXOffset)
			
			if tCurValue is not mKnobX then
				redraw all
				post "valueChanged" to my script object with [getKnobPercent()]
			end if
		end if
	end handler
	
	
	public handler OnMouseUp()	
		put false into mDrag
	
		redraw all
	end handler


	public handler OnMouseCancel()
		put false into mDrag
		redraw all
	end handler


	public handler OnMouseDown()
		if the click button is 1 then
			variable tLoc as Point
		
			put the click position into tLoc
		
			if tLoc is within mCurrentKnobBounds then
				-- start dragging operation
				put the x of tLoc - mKnobX into mClickXOffset
				put true into mDrag
				redraw all
			else if tLoc is within mSliderBounds then
				-- Jump to location clicked on
				put the x of tLoc into mKnobX
				redraw all
			end if
		end if
	end handler
	
	
	private handler getPaint(in pType as String) as Paint
		if pType is "knob" then
			if mDrag then
				return solid paint with mKnobHiliteColor
			else
				return solid paint with mKnobColor
			end if
		else if pType is "knob border" then
			if mDrag then
				return solid paint with mKnobBorderHiliteColor
			else
				return solid paint with mKnobBorderColor
			end if
		end if
	end handler
	
	
	private handler calculateGeometry()
		-- determine measurements for everything
		variable tSliderHeight as Real
		variable tKnobPadding as Real
		
		put my height * 0.416 into tSliderHeight
		put my height/2-mKnobBorderSize/2 into mKnobRadius -- border will go stroke width/2 beyond this radius
		put mKnobRadius + mKnobBorderSize/2 into tKnobPadding
		
		put rectangle [tKnobPadding, my height/2 - tSliderHeight/2, \
										my width - tKnobPadding, my height/2 + tSliderHeight/2] into mSliderBounds
		
		put the left of mSliderBounds into mKnobX
		put 0 into mClickXOffset
		put rectangle [0,0,0,0] into mCurrentKnobBounds
	end handler
	
	
	private handler setKnobX(in pSuggestedX as Number)
		put the maximum of the left of mSliderBounds and \
						(the minimum of the right of mSliderBounds and pSuggestedX) into mKnobX
	end handler
	
	
	private handler getKnobPercent() as Number
		return (mKnobX - the left of mSliderBounds) / the width of mSliderBounds
	end handler
	
	private handler setKnobPercent(in pPercent as Number)
		setKnobX(the left of mSliderBounds + the width of mSliderBounds * pPercent)
		redraw all
	end handler
	
	
	private handler setCornerRadius(in pRadius as Number)
		put pRadius into mCornerRadius
		redraw all
	end handler
	
	
	private handler getBarColor() as String
		return colorToString(mBarColor, false)
	end handler
	
	private handler setBarColor(in pColor as String)
		put stringToColor(pColor) into mBarColor
		redraw all
	end handler
	
	
	private handler getKnobColor() as String
		return colorToString(mKnobColor, false)
	end handler
	
	private handler setKnobColor(in pColor as String)
		put stringToColor(pColor) into mKnobColor
		redraw all
	end handler
	
	
	private handler getKnobHiliteColor() as String
		return colorToString(mKnobHiliteColor, false)
	end handler
	
	private handler setKnobHiliteColor(in pColor as String)
		put stringToColor(pColor) into mKnobHiliteColor
		redraw all
	end handler
	
	
	private handler getKnobBorderColor() as String
		return colorToString(mKnobBorderColor, false)
	end handler
	
	private handler setKnobBorderColor(in pColor as String)
		put stringToColor(pColor) into mKnobBorderColor
		redraw all
	end handler
	
	
	private handler getKnobBorderHiliteColor() as String
		return colorToString(mKnobBorderHiliteColor, false)
	end handler
	
	private handler setKnobBorderHiliteColor(in pColor as String)
		put stringToColor(pColor) into mKnobBorderHiliteColor
		redraw all
	end handler
	
	
	private handler setKnobBorderSize(in pSize as Number)
		put pSize into mKnobBorderSize
		redraw all
	end handler
	
	
	private handler colorToString(in pColor as Color, in pIncludeAlpha as Boolean) as String
		variable tColor as String
	
		if pColor is undefined then
			return ""
		end if
	
		put FormatInt(the rounded of ((the red of pColor) * 255)) into tColor
		put "," & FormatInt(the rounded of ((the green of pColor) * 255)) after tColor
		put "," & FormatInt(the rounded of ((the blue of pColor) * 255)) after tColor
	
		if pIncludeAlpha then
			put "," & FormatInt(the rounded of ((the alpha of pColor) * 255)) after tColor
		end if
	
		return tColor
	end handler

	private handler stringToColor(in pString as String) as Color
		if the number of chars in pString is 0 then
			return ""
			end if

		variable tRed as Real
		variable tGreen as Real
		variable tBlue as Real
		variable tAlpha as Real

		variable tComponentList as List
		split pString by "," into tComponentList

		variable tComponentCount
		put the number of elements in tComponentList into tComponentCount
		if tComponentCount is not 3 and tComponentCount is not 4 then
			// Invalid number of components detected
			throw "Invalid color"
		end if

		put (element 1 of tComponentList) parsed as number into tRed
		put (element 2 of tComponentList) parsed as number into tGreen
		put (element 3 of tComponentList) parsed as number into tBlue

		if tComponentCount is 4 then
			put (element 4 of tComponentList) parsed as number into tAlpha
		else
			put 1.0 into tAlpha
		end if

		return color [ tRed/255, tGreen/255, tBlue/255, tAlpha ]
	end handler

	handler FormatInt(in pNumber as Number) as String
		variable tNumberString as String

		put pNumber formatted as string into tNumberString

		if "." is in tNumberString then
			variable tDotOffset
			put the first offset of "." in tNumberString into tDotOffset
			delete char tDotOffset to (the number of chars in tNumberString) of tNumberString
		end if

		return tNumberString
	end handler
	
end widget